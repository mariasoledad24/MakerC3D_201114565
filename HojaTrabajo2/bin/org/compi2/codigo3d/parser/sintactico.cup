package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS,IGUAL,DIFERENTE,MAYOR,MENOR,MAYOR1,MENOR1,OR,AND,NOT, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
nonterminal NodoC3D inicial, expresion;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left IGUAL,DIFERENTE,MAYOR,MENOR,MAYOR1,MENOR1;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 


start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp 
                    {: 
                        
                        System.out.println(exp.getCad());
                        if(exp.getCad().equalsIgnoreCase("")==false)
                        {
             	           ControlC3D.agregarC3D("//ultimo valor: "+exp.getCad());
                 		}
                 		else
                 		{
                 		 ControlC3D.agregarC3D("//EtiquetaVerdadera: " +exp.getVerdadero()+"\n//EtiquetaFalsa: "+exp.getFalso());
                 		}
                 		RESULT = exp;
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq IGUAL expresion:der
                    {: 
                        String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();
                        String temp = "";
                        String c3d = "if " + izq.getCad() + " == " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,v,f); 
                    :}
            
            |   expresion:izq DIFERENTE expresion:der
                    {: 
                        String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();
                        String temp = "";
                        String c3d = "if " + izq.getCad() + " != " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,v,f); 
                    :}
                    
            |   expresion:izq MAYOR expresion:der
                    {: 
                         String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();                      
                        String c3d = "if " + izq.getCad() + " > " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        String temp="";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,v,f); 
                    :}
                    
            |   expresion:izq MENOR expresion:der
                    {: 
                        String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();
                        String temp ="";
                        String c3d = "if " + izq.getCad() + " < " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,v,f);  
                    :}
                   
            |   expresion:izq MAYOR1 expresion:der
                    {: 
                        String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();
                        String temp = "";
                        String c3d = "if " + izq.getCad() + " >= " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,v,f); 
                    :}
                    
            |   expresion:izq MENOR1 expresion:der
                    {: 
                        String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();
                        String temp = "";
                        String c3d = "if " + izq.getCad() + " <= " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,v,f);  
                    :}
                    
            |   expresion:izq OR{:String c3d=izq.getFalso()+":\n";ControlC3D.agregarC3D(c3d);:} expresion:der
                    {: 
                        String temp = "";   
                        RESULT = new NodoC3D(temp,izq.getVerdadero() +","+der.getVerdadero(),der.getFalso()); 
                    :}
                    
            |   expresion:izq AND{: String c3d=izq.getVerdadero()+":\n";ControlC3D.agregarC3D(c3d);:} expresion:der
                    {:  
                        String temp = "";   
                        RESULT = new NodoC3D(temp,der.getVerdadero(),izq.getFalso()+","+der.getFalso()); 
                    :}                                                                
                    
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                    
            |   NOT  PAR_IZQ expresion:exp PAR_DER   
                    {: 
                        String v=exp.getFalso();
                        String f=exp.getVerdadero(); 
                        String temp = "";   
                        RESULT = new NodoC3D(temp,v,f); 
                    :} 
                            
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;